<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>package_feeds_packages_elektra on Opde Issues Tracker</title>
    <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/</link>
    <description>Recent content in package_feeds_packages_elektra on Opde Issues Tracker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Oct 2021 23:24:40 +0000</lastBuildDate>
    
	<atom:link href="https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>compile.41</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.41/</link>
      <pubDate>Wed, 23 Jun 2021 23:22:00 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.41/</guid>
      <description>build number: 41
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.34</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.34/</link>
      <pubDate>Thu, 17 Jun 2021 08:29:46 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.34/</guid>
      <description>build number: 34
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.33</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.33/</link>
      <pubDate>Sun, 13 Jun 2021 11:07:24 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.33/</guid>
      <description>build number: 33
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.32</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.32/</link>
      <pubDate>Fri, 11 Jun 2021 17:48:12 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.32/</guid>
      <description>build number: 32
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.31</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.31/</link>
      <pubDate>Mon, 11 Oct 2021 23:24:40 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.31/</guid>
      <description>build number: 31
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.30</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.30/</link>
      <pubDate>Mon, 11 Oct 2021 04:18:20 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.30/</guid>
      <description>build number: 30
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.28</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.28/</link>
      <pubDate>Thu, 03 Jun 2021 14:22:39 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.28/</guid>
      <description>build number: 28
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.26</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.26/</link>
      <pubDate>Fri, 01 Oct 2021 08:23:47 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.26/</guid>
      <description>build number: 26
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.25</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.25/</link>
      <pubDate>Fri, 10 Sep 2021 11:13:51 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.25/</guid>
      <description>build number: 25
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.24</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.24/</link>
      <pubDate>Wed, 01 Sep 2021 09:41:22 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.24/</guid>
      <description>build number: 24
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.23</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.23/</link>
      <pubDate>Thu, 27 May 2021 00:00:11 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.23/</guid>
      <description>build number: 23
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.22</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.22/</link>
      <pubDate>Wed, 26 May 2021 12:48:50 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.22/</guid>
      <description>build number: 22
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.19</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.19/</link>
      <pubDate>Sat, 15 May 2021 01:44:27 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.19/</guid>
      <description>build number: 19
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.18</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.18/</link>
      <pubDate>Thu, 12 Aug 2021 23:56:29 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.18/</guid>
      <description>build number: 18
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.17</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.17/</link>
      <pubDate>Wed, 11 Aug 2021 04:29:55 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.17/</guid>
      <description>build number: 17
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.15</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.15/</link>
      <pubDate>Mon, 09 Aug 2021 01:02:52 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.15/</guid>
      <description>build number: 15
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.13</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.13/</link>
      <pubDate>Sun, 01 Aug 2021 08:17:42 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.13/</guid>
      <description>build number: 13
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.12</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.12/</link>
      <pubDate>Sun, 09 May 2021 11:28:43 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.12/</guid>
      <description>build number: 12
re-implement command docker pull elonh/opde:sdk docker run -it --rm elonh/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.10</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.10/</link>
      <pubDate>Wed, 07 Jul 2021 18:06:46 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.10/</guid>
      <description>build number: 10
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
    <item>
      <title>compile.2</title>
      <link>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.2/</link>
      <pubDate>Wed, 30 Jun 2021 01:14:42 +0000</pubDate>
      
      <guid>https://immortalwrt.github.io/opde/x86/64/package_feeds_packages_elektra/compile.2/</guid>
      <description>build number: 2
re-implement command docker pull immortalwrt/opde:sdk docker run -it --rm immortalwrt/opde:sdk zsh # or bash export http_proxy= # [your proxy], do not use localhost or 127.0.0.1 export https_proxy=$http_proxy opde feeds &amp;amp;&amp;amp; opde config -a make package/feeds/packages/elektra/compile -j$(nproc) || make package/feeds/packages/elektra/compile V=s Compile.txt -- The C compiler identification is GNU 8.4.0 -- The CXX compiler identification is GNU 8.4.0 -- Detecting C compiler ABI info -- Detecting C compiler ABI info - done -- Check for working C compiler: /openwrt/staging_dir/toolchain-x86_64_gcc-8.</description>
    </item>
    
  </channel>
</rss>